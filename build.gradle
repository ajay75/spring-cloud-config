/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/tutorial_java_projects.html
 */
buildscript {
    ext {}

    repositories {
        mavenLocal()
        jcenter()
        maven { url("https://plugins.gradle.org/m2/") }
    }
    dependencies {
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath ("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradlePluginVersion}")
    }
}


//---------------------------------------------------------------------------//
apply from: "${rootDir}/config/sonar.gradle"

//---------------------------------------------------------------------------//
allprojects {

    apply plugin: "java"
    apply plugin: "eclipse"
    apply plugin: "idea"

    /**
     * https://docs.gradle.org/current/userguide/project_reports_plugin.html
     * taskReport
     * propertyReport
     * dependencyReport
     * htmlDependencyReport
     * --> projectReports
     */
    apply plugin: "project-report"

    check.dependsOn projectReport


    // Code Coverage:
    apply from: "${rootDir}/config/codecoverage.gradle"

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }

        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-milestone" }

        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/snapshot" }

    }

} // allprojects

//---------------------------------------------------------------------------//
subprojects {

    apply plugin: "io.spring.dependency-management"

    //-----------------------------------------------------------------------//
    dependencyManagement {
        imports {
            mavenBom("io.spring.platform:platform-bom:${springIoVersion}")
        }
    }

    /**
     * ResolutionStrategy to override a dependency globally
     * https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html#org.gradle.api.artifacts.ResolutionStrategy:force%28java.lang.Object[]%29
     */
    configurations.all {
        resolutionStrategy.force "com.google.guava:guava:${guavaVersion}", "net.sourceforge.htmlunit:htmlunit:latest.release"
    }


    /**
     * To view dependency tree in gradle:
     *
     * ./gradlew dependencies
     */
    dependencies {

        //-----------------------------------------------------------------------//
        compile ("org.aspectj:aspectjweaver")
        //-----------------------------------------------------------------------//
    } // dependencies


    /**
     * Speed up the build process to create a jar quickly:
     * gradle test -Pfast
     * gradle check -Pfast
     *
     * Instead of omitting each one:
     * <pre>gradle build -x checkstyle -x pmd -x findbugs -x test</pre>
     *
     * TODO: Revisit:
     * project.tasks["sonarqube"].dependsOn "anotherTask"
     */
    if (project.hasProperty("fast")) {
        gradle.startParameter.excludedTaskNames += ["checkstyleMain",
                                                    "checkstyleTest",
                                                    "pmdMain",
                                                    "findbugsMain",
//                                                    "test",
                                                    "projectReport"]
    }


    //-----------------------------------------------------------------------//
    // Testing Configuration:

    /**
     * Now a Jenkins job can use:
     * gradle -PignoreTestFailures=true test
     * and not fail the build base on unit test failure.
     */
    if (!ext.has("ignoreTestFailures")) {
        ext.ignoreTestFailures = false
    }

    test {
        ignoreFailures = project.ext.ignoreTestFailures
        //maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        maxParallelForks = Runtime.runtime.availableProcessors()
        forkEvery = 100
//        debug = true


        testLogging {
            showCauses true
            showExceptions true
            showStackTraces true

            events "failed"
            exceptionFormat "full"
        }


        reports.html.enabled = true
        reports.junitXml.enabled = true
    }

    /**
     * https://guides.gradle.org/performance/
     */
    tasks.withType(JavaCompile) {
        options.incremental = true
        options.fork = true
    }

    jar {
        baseName = "${rootProject.name}"
        version =  "${project.version}"
        manifest {
            attributes(
                    "Main-Class": "com.packtpub.springsecurity.CalendarApplication"
            )
        }
    }


} // subprojects
//---------------------------------------------------------------------------//

/**
 * https://docs.gradle.org/current/userguide/eclipse_plugin.html
 *
 * To create eclispe workspace:
 * ./gradlew eclipse
 *
 * To remove all workspace files:
 * ./gradlew cleanEclipse
 */
eclipse {
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
}

/**
 * Gradle Plugin:
 * https://docs.gradle.org/current/userguide/idea_plugin.html
 *
 * https://docs.gradle.org/4.1/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
 *
 */
//    apply plugin: "idea"
// Due to Gradle 4.x changes (separate output directories per JVM language)
// Idea developers refuse to reuse Gradle classpath and use own "out/" directory.
// Revert to old behavior to allow Spring Devtool to work with using fast Idea compiler.
// https://youtrack.jetbrains.com/issue/IDEA-175172
// Alternatively use native Gradle builds or bootRun.addResources = true
// To use this feature push Ctrl+Shift+F9 to recompile!
// Be aware that Idea put resources into classes/ directory!!
//    idea.module.inheritOutputDirs = false
//    idea.module.outputDir = sourceSets.main.output.classesDir
//    idea.module.testOutputDir = sourceSets.test.output.classesDir
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        outputDir file("build/classes/main")
        testOutputDir file("build/classes/test")
    }
}

// TODO: Add ./out to the clean
//clean{
//    delete "out"
//}



//---------------------------------------------------------------------------//
/*
buildScan {
// Uncomment the lines below to agree to the Terms of Service.
    licenseAgreementUrl = "https://gradle.com/terms-of-service"
    licenseAgree = "yes"
    tag "JBCP"
    link "BitBucket", "https://bitbucket.org/mickknutson/jbcpcalendar"
}

buildScanRecipes {
  recipes "git-status", "travis-ci", "disk-usage", "gc-stats"
  recipe "git-commit", baseUrl: "https://github.com/ben-manes/caffeine/tree"
}
*/




//---------------------------------------------------------------------------//
/**
 * JacocoReport:
 * https://docs.gradle.org/current/userguide/jacoco_plugin.html
 * https://github.com/codecov/example-gradle
 *
 * To run:
 *
 * gradle clean test jacoco
 * gradle clean test jacocoTestReport
 *
 * Can be run on the whole project:
 * gradle check
 * gradle codeCoverageReport
 *
 * Can be run on individual subprojects:
 * gradle jacocoTestReport
 */
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml {
            enabled = true
            destination = file("${buildDir}/reports/jacoco/report.xml")
        }
        html {
            enabled = false
            destination = file("${buildDir}/reports/jacoco/jacocoHtml")
        }
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

/**
 * https://lkrnac.net/blog/2016/10/aggregate-test-coverage-report/
 */
def publishedProjects = subprojects.findAll()

task codeCoverageReport2(type: JacocoReport, group: "Coverage reports") {
    description = "Generates an aggregate report from all subprojects"

    dependsOn(publishedProjects.test)

    additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(publishedProjects.sourceSets.main.output)
    executionData = files(publishedProjects.jacocoTestReport.executionData)

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }

    reports {
        xml {
            enabled = true
            destination = file("${buildDir}/reports/jacoco/report.xml")
        }
        html {
            enabled = false
            destination = file("${buildDir}/reports/jacoco/jacocoHtml")
        }
        csv.enabled false
    }
}

//---------------------------------------------------------------------------//
// The End...
//---------------------------------------------------------------------------//
