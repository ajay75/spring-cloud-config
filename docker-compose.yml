##---------------------------------------------------------------------------##
## Taken from:
## https://docs.docker.com/compose/compose-file/#compose-file-structure-and-examples
##
# Possible solution https://stackoverflow.com/questions/45271645/docker-compose-and-spring-boot-config-server
#
# https://docs.docker.com/compose/compose-file/
#
##---------------------------------------------------------------------------##
version: "3.1"

services:
##---------------------------------------------------------------------------##
  configserver:
    container_name: configserver

    # Does the build actually create the image?
#    build:
#      context: ./configserver
#      dockerfile: Dockerfile
    # replace username/repo:tag with your name and image details
    image: mickknutson/configserver:latest

#    expose:
#      - 8888
    ports:
      - 8888:8888

    networks:
      - cloud-config-net

    volumes:
      - "$HOME/microservices_config_repo:/app/microservices_config_repo"

    logging:
      driver: json-file

    environment:
      - CLOUD_CONFIG_REPO=file:////app/microservices_config_repo
      - SPRING_PROFILES_ACTIVE=dev
      - DELAY_SLEEP=10 # gives time for the database to boot before the application

      # - SPRING_APPLICATION_JSON= \
      #  '{"spring": {"cloud": {"config": {"server": \
      #  {"git": {"uri": "file:////app/microservices_config_repo", \
      #  "clone-on-start": true}}}}}}'

##---------------------------------------------------------------------------##
  # MicroservicesClient
  microservicesclient:
    container_name: microservicesclient
#    build:
#      context: ./microservicesclient
#      dockerfile: Dockerfile
    image: mickknutson/microservicesclient:latest

    depends_on:
      - configserver

#    expose:
#      - 8080
    ports:
      - 8080:8080

    networks:
      - cloud-config-net

    extra_hosts:
      - "configserver:172.19.0.2"

    links:
      - configserver

    logging:
      driver: json-file

    environment:
      - SPRING_PROFILES_ACTIVE=default
      - DELAY_SLEEP=10 # gives time for the database to boot before the application
      - CLOUD_CONFIG_CLIENT_FAILFAST=true
#      - SPRING_CLOUD_CONFIG_URI=http://0.0.0.0:8888
#      - SPRING_CLOUD_CONFIG_URI=http://configserver.baselogic.io:8888
      - SPRING_CLOUD_CONFIG_URI=http://configserver:8888
#      - SPRING_APPLICATION_JSON='{"spring": {"cloud": {"config": {"uri": "http://configserver:8888"}}}}'

##---------------------------------------------------------------------------##

#networks:
#    cloud-config-net:
#        driver: bridge
#    default:
#        external:
#            name: cloud-config-net
networks:
    cloud-config-net:
      external:
        name: cloud-config-net

##---------------------------------------------------------------------------##
#volumes:
#    "$HOME"/microservices_config_repo:
#        external: true
#volumes:
#  "$HOME"/microservices_config_repo: /app/microservices_config_repo









































##---------------------------------------------------------------------------##
#version: "3"
#services:
#
#  redis:
#    image: redis:alpine
#    ports:
#      - "6379"
#    networks:
#      - frontend
#    deploy:
#      replicas: 2
#      update_config:
#        parallelism: 2
#        delay: 10s
#      restart_policy:
#        condition: on-failure
#
#  db:
#    image: postgres:9.4
#    volumes:
#      - db-data:/var/lib/postgresql/data
#    networks:
#      - backend
#    deploy:
#      placement:
#        constraints: [node.role == manager]
#
#  vote:
#    image: dockersamples/examplevotingapp_vote:before
#    ports:
#      - 5000:80
#    networks:
#      - frontend
#    depends_on:
#      - redis
#    deploy:
#      replicas: 2
#      update_config:
#        parallelism: 2
#      restart_policy:
#        condition: on-failure
#
#  result:
#    image: dockersamples/examplevotingapp_result:before
#    ports:
#      - 5001:80
#    networks:
#      - backend
#    depends_on:
#      - db
#    deploy:
#      replicas: 1
#      update_config:
#        parallelism: 2
#        delay: 10s
#      restart_policy:
#        condition: on-failure
#
#  worker:
#    image: dockersamples/examplevotingapp_worker
#    networks:
#      - frontend
#      - backend
#    deploy:
#      mode: replicated
#      replicas: 1
#      labels: [APP=VOTING]
#      restart_policy:
#        condition: on-failure
#        delay: 10s
#        max_attempts: 3
#        window: 120s
#      placement:
#        constraints: [node.role == manager]
#
#  visualizer:
#    image: dockersamples/visualizer:stable
#    ports:
#      - "8080:8080"
#    stop_grace_period: 1m30s
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    deploy:
#      placement:
#        constraints: [node.role == manager]
#
#networks:
#  frontend:
#  backend:
#
#volumes:
#  db-data:

##---------------------------------------------------------------------------##
